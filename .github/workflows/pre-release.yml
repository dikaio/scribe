name: Pre-Release Testing

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          check-latest: true

      - name: Run tests
        run: go test ./... -race -coverprofile=coverage.txt -covermode=atomic

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  verify-build:
    name: Verify Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          check-latest: true

      - name: Build
        run: go build -v ./cmd/scribe

      - name: Verify binary works
        run: |
          ./scribe version
          ./scribe help

  cross-platform:
    name: Cross-Platform Tests
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24']
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true

      - name: Build
        run: go build -v ./cmd/scribe

      - name: Run tests
        run: go test ./... -race

  dry-run-release:
    name: Dry Run Release
    if: github.event_name == 'workflow_dispatch'
    needs: [test, verify-build, cross-platform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          check-latest: true

      # Make sure our go.mod exists and is valid
      - name: Prepare environment
        run: |
          # Ensure go.mod exists (if not already)
          if [ ! -f go.mod ]; then
            go mod init github.com/dikaio/scribe
          fi
          go mod tidy
          touch go.sum  # Create an empty go.sum file if it doesn't exist

      - name: Run GoReleaser (Dry Run)
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --clean --skip=publish --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifacts
        run: |
          ls -la dist/
          if [ ! -d "dist/" ]; then
            echo "No artifacts were produced!"
            exit 1
          fi

      - name: Simulate version bump
        run: |
          NEW_VERSION=$(./scripts/release.sh --type ${{ inputs.version_type }} --dry-run | grep "New version:" | sed 's/.*: v//')
          echo "Pre-release test for version bump to v${NEW_VERSION} was successful"